#!/usr/bin/env node

var commander = require('commander'),
	version = require('../package.json').version,
	_ = require('underscore'),
	async = require('async'),
	ConfigSvcFactory = require('../lib/api/ConfigSvcFactory.js');

commander
	.version(version)
	.usage('[options] <file ...>')
	.option('-o, --database-host <host>', 'The MongoDB host that this should connect to (hostname and port). This can also be a comma-separated list of hosts to support a replica set. Defaults to 127.0.0.1:27017.')
	.option('-u, --database-user <user>', 'The user name to use when connecting to MongoDB. Defaults to an empty string.')
	.option('-p, --database-password <password>', 'The password to use when connecting to MongoDB. Defaults to an empty string.')
	.parse(process.argv);

var defaultTagTypes = [
		{ name: 'environment',	priority: Math.pow(2,0) },
		{ name: 'machine', 		priority: Math.pow(2,1) },
		{ name: 'application',	priority: Math.pow(2,2) }
	],
	defaultUsers = [
		{ name: 'admin',	password: 'admin',	permissions: Math.pow(2,2) },
		{ name: 'editor',	password: 'editor',	permissions: Math.pow(2,1) },
		{ name: 'user',		password: 'user',	permissions: Math.pow(2,0) }
	],
	dbHosts = (commander.databaseHost) ? commander.databaseHost.split(',') : undefined;
	options = {
		db: {
			hosts: dbHosts,
			userName: commander.databaseUser,
			password: commander.databasePassword
		}
	},
	configSvcFactory = new ConfigSvcFactory(options),
	configTagSvc = configSvcFactory.getTagSvc(),
	configUserSvc = configSvcFactory.getUserSvc(),
	checkIfTagsExist = function(callback) {
		configTagSvc.connect(function(err) {
			if (err) {
				console.log('Error connecting to DB', err);
				return;
			}
			configTagSvc.findAll(function(err, tags) {
				if (err) {
					console.log('Error attempting to get existing tag values from DB', err);
					return;
				}
				var hasEnvironmentTag = _.any(tags, function(item) { return defaultTagTypes[0].name === item.name; }),
					hasMachineTag = _.any(tags, function(item) { return defaultTagTypes[1].name === item.name; }),
					hasApplicationTag = _.any(tags, function(item) { return defaultTagTypes[2].name === item.name; });

				callback(err, hasEnvironmentTag, hasMachineTag, hasApplicationTag);
			});

		});
	},
	checkIfUsersExist = function(callback) {
		configUserSvc.connect(function(err) {
			if (err) {
				console.log('Error connecting to DB', err);
				return;
			}
			configUserSvc.findAll(function(err, users) {
				if (err) {
					console.log('Error attempting to get existing users from DB', err);
					return;
				}
				//console.log(defaultUsers[0].name);
				var hasAdmin = _.any(users, function(item) { return defaultUsers[0].name === item.name; }),
					hasEditor = _.any(users, function(item) { return defaultUsers[1].name === item.name; }),
					hasUser = _.any(users, function(item) { return defaultUsers[2].name === item.name; });

				callback(err, hasAdmin, hasEditor, hasUser);
			});

		});
	},
	insertTagType = function(document, callback) {
		configTagSvc.connect(function(err) {
			if (err) {
				console.log('Error connecting to DB', err);
				return;
			}
			configTagSvc.insert(document, function(err, tag) {
				if (err) {
					console.log('Error inserting tag values to DB', err);
					return;
				}
				callback(err, true);
			});

		});
	},
	insertUser = function(document, callback) {
		configUserSvc.connect(function(err) {
			if (err) {
				console.log('Error connecting to DB', err);
				return;
			}
			configUserSvc.insert(document, function(err, user) {
				if (err) {
					console.log('Error inserting user to DB', err);
					return;
				}
				callback(err, true);
			});

		});
	};

async.parallel([
	function(callback) {
		checkIfTagsExist(function(err, hasEnvironmentTag, hasMachineTag, hasApplicationTag) {
			async.parallel([
				function(cb) {
					if (hasEnvironmentTag) {
						return cb();
					}
					insertTagType(defaultTagTypes[0], cb);
				},
				function(cb) {
					if (hasMachineTag) {
						return cb();
					}
					insertTagType(defaultTagTypes[1], cb);
				},
				function(cb) {
					if (hasApplicationTag) {
						return cb();
					}
					insertTagType(defaultTagTypes[2], cb);
				}
			], function(err, results) {
				configTagSvc.disconnect()
				callback(err, results);
			});
		});
	},
	function(callback) {
		checkIfUsersExist(function(err, hasAdmin, hasEditor, hasUser) {
			async.parallel([
				function(cb) {
					if (hasAdmin) {
						return cb();
					}
					insertUser(defaultUsers[0], cb);
				},
				function(cb) {
					if (hasEditor) {
						return cb();
					}
					insertUser(defaultUsers[1], cb);
				},
				function(cb) {
					if (hasUser) {
						return cb();
					}
					insertUser(defaultUsers[2], cb);
				}
			], function(err, results) {
				configUserSvc.disconnect();
				callback(err, results);
			});
		});
	}
], function(err, results) {
	console.log('Done!');
	process.exit(0);
});


